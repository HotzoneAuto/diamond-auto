syntax = "proto2";

package apollo.display;


message Chassis_Info {
        enum DrivingMode {
          COMPLETE_MANUAL = 0;  // human drive
          COMPLETE_AUTO_DRIVE = 1;
          AUTO_STEER_ONLY = 2;  // only steer
          AUTO_SPEED_ONLY = 3;  // include throttle and brake
      
          // security mode when manual intervention happens, only response status
          EMERGENCY_MODE = 4;
        }
      
        enum ErrorCode {
          NO_ERROR = 0;
      
          CMD_NOT_IN_PERIOD = 1;  // control cmd not in period
      
          // car chassis report error, like steer, brake, throttle, gear fault
          CHASSIS_ERROR = 2;
      
          // classify the types of the car chassis errors
          CHASSIS_ERROR_ON_STEER = 6;
          CHASSIS_ERROR_ON_BRAKE = 7;
          CHASSIS_ERROR_ON_THROTTLE = 8;
          CHASSIS_ERROR_ON_GEAR = 9;
      
          MANUAL_INTERVENTION = 3;  // human manual intervention
      
          // receive car chassis can frame not in period
          CHASSIS_CAN_NOT_IN_PERIOD = 4;
      
          UNKNOWN_ERROR = 5;
        }
      
        enum GearPosition {
          GEAR_NEUTRAL = 0;
          GEAR_DRIVE = 1;
          GEAR_REVERSE = 2;
          GEAR_PARKING = 3;
          GEAR_LOW = 4;
          GEAR_INVALID = 5;
          GEAR_NONE = 6;
        }
      
        // Vehicle Speed in meters per second.
        optional float speed_mps = 5 [default = nan];
      
        // Vehicle odometer in meters.
        optional float odometer_m = 6 [default = nan];
      
        // Real throttle location in [%], ranging from 0 to 100.
        optional float throttle_percentage = 8 [default = nan];
      
        // Real brake location in [%], ranging from 0 to 100.
        optional float brake_percentage = 9 [default = nan];
      
        // Real steering location in [%], ranging from -100 to 100.
        // steering_angle / max_steering_angle
        // Clockwise: negative
        // CountClockwise: positive
        optional float steering_percentage = 11 [default = nan];
      
        // Applied steering torque in [Nm].
        optional float steering_torque_nm = 12 [default = nan];
      
        // Parking brake status.
        optional bool parking_brake = 13;
      
        optional DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
        optional ErrorCode error_code = 22 [default = NO_ERROR];
        optional GearPosition gear_location = 23;
      
        // chassis also needs it own sending timestamp
        optional apollo.common.Header header = 25;
      
        optional int32 chassis_error_mask = 26 [default = 0];
      
        optional apollo.common.VehicleID vehicle_id = 33;
}

message Display {
    optional apollo.common.Header header = 1;
    optional Chassis_Info chassis_info = 2;
    optional string tips = 3;
}